name: CD

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  validate-release:
    name: Validate release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install dependencies
        run: pip install yq

      - name: Extract version
        run: |
          version=$(echo ${{github.ref_name}} | cut -c2-)
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Validate the crate version in Cargo.toml
        run: |
          CRATE_VERSION=$(tomlq -r '.package.version' Cargo.toml)
          if [[ $CRATE_VERSION != $VERSION ]]; then
            echo "Crate version did not match the release tag"
            exit 1
          fi
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Validate the crate version in Cargo.lock
        run: |
          CRATE_LOCK_VERSION=$(
            tomlq -r '.package[] | select(.name == "argo-hermes") | .version' Cargo.lock
          )
          if [[ $CRATE_LOCK_VERSION != $VERSION ]]; then
            echo "Crate lock version did not match the release tag"
            exit 1
          fi
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Validate the image tag in plugin.yaml
        run: |
          IMAGE_TAG=$(
            yq -r '.data."sidecar.container"' plugin.yaml \
            | yq -r .image | cut -d':' -f2
          )
          if [[ $IMAGE_TAG != $VERSION ]]; then
            echo "Image tag did not match the release tag"
            exit 1
          fi
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}

  release-image:
    name: Build and push image
    runs-on: ubuntu-latest
    needs: validate-release
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=edge
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build container image
        uses: docker/build-push-action@v2
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release-docs:
    name: Build and push docs
    needs: validate-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Extract version
        id: raw_version
        run: |
          version=$(echo ${{github.ref_name}} | cut -c2-)
          echo "::set-output name=version::$version"

      - name: Split version code
        uses: xom9ikk/split@v1
        id: version
        with:
          string: ${{ steps.raw_version.outputs.version }}
          separator: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup Git user
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Build and commit the docs (on release)
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        working-directory: docs/
        run: |
          make deploy \
            VERSION=${{ steps.version.outputs._0 }}.${{ steps.version.outputs._1 }} \
            ALIAS=latest \
            OPTS=--update-aliases \
            SET_DEFAULT=true

      - name: Build and commit the docs (dev)
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        working-directory: docs/
        run: |
          make deploy VERSION=dev HERMES_VERSION=dev

      - name: Checkout the gh-pages branch
        run: git checkout gh-pages

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages

  create-release:
    name: Create a new release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs:
      - release-image
      - release-docs
    permissions:
      contents: write

    steps:
      - uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
