{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hermes \u2013 notifications for Argo Workflows Hermes aims to provide a streamlined way of sending notifications to various messaging services from your Argo Workflows pipelines. An example of a Slack notification sent using Hermes Features Easy to use \u2013 Hermes is a template executor plugin . Once installed, Argo Workflows will automatically provide a Hermes instance for you to interact with from your workflow. Template system \u2013 keep a centralized set of reusable notification templates and use them freely in your workflows. In-place updates \u2013 avoid clutter in your channels by updating existing messages and keep the history of changes in a thread under the notification message instead. Multiple recipient support \u2013 do you need to send notifications to different channels or services from a single workflow? No problem. Quickstart Compatibilty disclaimer Hermes builds upon Argo Workflow's yet to be released support for template executor plugins , which means that you will most likely not be able to use it in your cluster yet. If you still want to try Hermes out, you will have to build and install Argo Workflow from the PR. Keen to take Hermes for a spin? Go ahead and visit the quickstart guide . Usage example In case you need some more convincing before you give Hermes a chance, take a look at an example workflow that sends the notifications shown in the demo above. apiVersion : argoproj.io/v1alpha1 kind : Workflow metadata : generateName : notifications-test- spec : entrypoint : main templates : - name : main steps : - - name : setup-notifications template : hermes-setup - - name : pre-notification template : hermes-notify arguments : parameters : - name : message value : \"Deployment started :hourglass_flowing_sand:\" - - name : hello template : hello - - name : post-notification template : hermes-notify arguments : parameters : - name : message value : \"Deployment succeeded :white_check_mark:\" - name : hermes-setup plugin : hermes : setup : alias : default service : slack config : token : slack-token icon_emoji : \":rocket:\" - name : hermes-notify inputs : parameters : - name : message plugin : hermes : notify : target : default template : hermes-template-slack-default config : channel : sandbox context : message : \"{{inputs.parameters.message}}\" app : hermes env : prod revision_sha : \"deadbeef\" revision_url : \"http://github.com/...\" log_url : \"http://github.com/...\" - name : hello container : image : docker/whalesay command : [ cowsay ] args : [ \"hello world\" ] If this managed to catch your interest, learn how to setup Hermes using the quickstart guide .","title":"Introduction"},{"location":"#hermes-notifications-for-argo-workflows","text":"Hermes aims to provide a streamlined way of sending notifications to various messaging services from your Argo Workflows pipelines. An example of a Slack notification sent using Hermes","title":"Hermes \u2013 notifications for Argo Workflows"},{"location":"#features","text":"Easy to use \u2013 Hermes is a template executor plugin . Once installed, Argo Workflows will automatically provide a Hermes instance for you to interact with from your workflow. Template system \u2013 keep a centralized set of reusable notification templates and use them freely in your workflows. In-place updates \u2013 avoid clutter in your channels by updating existing messages and keep the history of changes in a thread under the notification message instead. Multiple recipient support \u2013 do you need to send notifications to different channels or services from a single workflow? No problem.","title":"Features"},{"location":"#quickstart","text":"Compatibilty disclaimer Hermes builds upon Argo Workflow's yet to be released support for template executor plugins , which means that you will most likely not be able to use it in your cluster yet. If you still want to try Hermes out, you will have to build and install Argo Workflow from the PR. Keen to take Hermes for a spin? Go ahead and visit the quickstart guide .","title":"Quickstart"},{"location":"#usage-example","text":"In case you need some more convincing before you give Hermes a chance, take a look at an example workflow that sends the notifications shown in the demo above. apiVersion : argoproj.io/v1alpha1 kind : Workflow metadata : generateName : notifications-test- spec : entrypoint : main templates : - name : main steps : - - name : setup-notifications template : hermes-setup - - name : pre-notification template : hermes-notify arguments : parameters : - name : message value : \"Deployment started :hourglass_flowing_sand:\" - - name : hello template : hello - - name : post-notification template : hermes-notify arguments : parameters : - name : message value : \"Deployment succeeded :white_check_mark:\" - name : hermes-setup plugin : hermes : setup : alias : default service : slack config : token : slack-token icon_emoji : \":rocket:\" - name : hermes-notify inputs : parameters : - name : message plugin : hermes : notify : target : default template : hermes-template-slack-default config : channel : sandbox context : message : \"{{inputs.parameters.message}}\" app : hermes env : prod revision_sha : \"deadbeef\" revision_url : \"http://github.com/...\" log_url : \"http://github.com/...\" - name : hello container : image : docker/whalesay command : [ cowsay ] args : [ \"hello world\" ] If this managed to catch your interest, learn how to setup Hermes using the quickstart guide .","title":"Usage example"},{"location":"compatibility/","text":"Compatibilty disclaimer Hermes builds upon Argo Workflow's yet to be released support for template executor plugins , which means that you will most likely not be able to use it in your cluster yet. If you still want to try Hermes out, you will have to build and install Argo Workflow from the PR.","title":"Compatibility"},{"location":"quickstart/","text":"Quick Start Compatibilty disclaimer Hermes builds upon Argo Workflow's yet to be released support for template executor plugins , which means that you will most likely not be able to use it in your cluster yet. If you still want to try Hermes out, you will have to build and install Argo Workflow from the PR. Install Hermes Install Hermes by creating following the ConfigMap in your cluster: plugin.yaml kubectl apiVersion : v1 kind : ConfigMap metadata : name : hermes labels : workflows.argoproj.io/configmap-type : ExecutorPlugin workflows.argoproj.io/version : '>= v3.3' data : sidecar.container : | name: hermes image: ghcr.io/kjagiello/hermes:0.1.0 imagePullPolicy: IfNotPresent command: ['-p', '3030'] ports: - containerPort: 3030 resources: limits: cpu: 200m memory: 64Mi requests: cpu: 100m memory: 32Mi securityContext: runAsNonRoot: true runAsUser: 1000 kubectl apply -f \\ https://raw.githubusercontent.com/kjagiello/hermes/master/plugin.yaml Hint Keep in mind that template executor plugins run as containers within a single pod, thus port collisions can occur. If your encounter this issue, you might have to adjust the port in the plugin manifest of Hermes. Service account Authentication tokens for the different services are passed to Hermes as secrets, which in turn requires that Hermes is able to fetch them using the Kubernetes API. Argo Workflows, by default, uses a service account with limited permissions, so in order to successfully run Hermes you will have to create a custom Role for your workflow that grants the get permission to the secrets needed by Hermes. See an example below: --- # Role apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : name : workflow-role rules : # Pod get/watch is used to identify the container IDs of the current pod. # Pod patch is used to annotate the step's outputs back to controller (e.g. artifact location). - apiGroups : - \"\" verbs : - get - watch - patch resources : - pods # Logs get/watch are used to get the pods logs for script outputs, and for log archival - apiGroups : - \"\" verbs : - get - watch resources : - pods/log # Access to secrets - apiGroups : - \"\" verbs : - get resources : - secrets resourceNames : # List your secrets here - ... --- # RoleBinding apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : name : workflow-permissions roleRef : apiGroup : rbac.authorization.k8s.io kind : Role name : workflow-role subject : kind : ServiceAccount name : workflow-sa --- # ServiceAccount apiVersion : v1 kind : ServiceAccount metadata : name : workflow-sa What's next? Now that Hermes is installed it is time to take a look on how to send some notifications. In order to do that, let's get yourself familiarized with services .","title":"Quickstart"},{"location":"quickstart/#quick-start","text":"Compatibilty disclaimer Hermes builds upon Argo Workflow's yet to be released support for template executor plugins , which means that you will most likely not be able to use it in your cluster yet. If you still want to try Hermes out, you will have to build and install Argo Workflow from the PR.","title":"Quick Start"},{"location":"quickstart/#install-hermes","text":"Install Hermes by creating following the ConfigMap in your cluster: plugin.yaml kubectl apiVersion : v1 kind : ConfigMap metadata : name : hermes labels : workflows.argoproj.io/configmap-type : ExecutorPlugin workflows.argoproj.io/version : '>= v3.3' data : sidecar.container : | name: hermes image: ghcr.io/kjagiello/hermes:0.1.0 imagePullPolicy: IfNotPresent command: ['-p', '3030'] ports: - containerPort: 3030 resources: limits: cpu: 200m memory: 64Mi requests: cpu: 100m memory: 32Mi securityContext: runAsNonRoot: true runAsUser: 1000 kubectl apply -f \\ https://raw.githubusercontent.com/kjagiello/hermes/master/plugin.yaml Hint Keep in mind that template executor plugins run as containers within a single pod, thus port collisions can occur. If your encounter this issue, you might have to adjust the port in the plugin manifest of Hermes.","title":"Install Hermes"},{"location":"quickstart/#service-account","text":"Authentication tokens for the different services are passed to Hermes as secrets, which in turn requires that Hermes is able to fetch them using the Kubernetes API. Argo Workflows, by default, uses a service account with limited permissions, so in order to successfully run Hermes you will have to create a custom Role for your workflow that grants the get permission to the secrets needed by Hermes. See an example below: --- # Role apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : name : workflow-role rules : # Pod get/watch is used to identify the container IDs of the current pod. # Pod patch is used to annotate the step's outputs back to controller (e.g. artifact location). - apiGroups : - \"\" verbs : - get - watch - patch resources : - pods # Logs get/watch are used to get the pods logs for script outputs, and for log archival - apiGroups : - \"\" verbs : - get - watch resources : - pods/log # Access to secrets - apiGroups : - \"\" verbs : - get resources : - secrets resourceNames : # List your secrets here - ... --- # RoleBinding apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : name : workflow-permissions roleRef : apiGroup : rbac.authorization.k8s.io kind : Role name : workflow-role subject : kind : ServiceAccount name : workflow-sa --- # ServiceAccount apiVersion : v1 kind : ServiceAccount metadata : name : workflow-sa","title":"Service account"},{"location":"quickstart/#whats-next","text":"Now that Hermes is installed it is time to take a look on how to send some notifications. In order to do that, let's get yourself familiarized with services .","title":"What's next?"},{"location":"services/","text":"A service, in context of Hermes, provides an integration with a messaging service, i.e. Slack, Teams, etc. Note that every service have different requirements as for configuration (authentication, templates, etc) and also provide different set of capabilities (Slack supports in-place updates of notifications, while IRC would not). For this reason, this guide will only show the service-agnostic parts of interacting with Hermes. Service configuration Let's start with a minimal workflow in which we call two templates that will be defined later on in this guide. apiVersion : argoproj.io/v1alpha1 kind : Workflow metadata : generateName : notifications-test- spec : entrypoint : main templates : - name : main steps : - - name : setup-service template : hermes-setup - - name : send-notification template : hermes-notify arguments : parameters : - name : message value : \"Hello world!\" - name : hermes-setup # To be defined... - name : hermes-notify # To be defined... Setting up a service A service is setup by issuing a setup call to Hermes. It expects following parameters: alias \u2013 an alias for the service that we will use to send notifications. This allows us to have multiple instances of the same service (imagine a scenario when you would like to send notifications to multiple Slack workspaces from the same workflow) service - the name of the service that we want to setup, e.g. slack config - service specific configuration, e.g. authenthication token, custom avatar, etc hermes-setup - name : hermes-setup plugin : hermes : setup : alias : default service : some-service config : # Service specific config Adding a template In order to send a notification, we have to setup a template that we will use to render the notification. A template at its core is just a ConfigMap that has following shape: hermes-template apiVersion : v1 kind : ConfigMap metadata : name : hermes-template data : subtemplate1 : | {\"message\": \"{{message}}\"} # subtemplate2: ... The `` you are seeing in the template above is a Handlebar expression . It will be populated with the context provided by you when sending a notification. Internally, Hermes uses handlebar-rust as the template engine. Also, as you probably have noticed, a template consists of sub-templates. Sub-templates allow services to have multiple ways of presenting the same notification, i.e. in case of Slack a message might be sent to the channel using the primary sub-template and updates to the message will be posted in the message thread using the secondary sub-template. Every service defines its own set of required sub-templates. Sending a notification Now that we have both the service and template setup, it is time to see how sending notifications works. Notifications are sent using the notify call to Hermes. It expects following parameters: target \u2013 the alias of the service that we want to use to send a notification config - service specific configuration, e.g. name of a slack channel template - the name of the template to use for the notification context - the context to render the template with hermes-notify - name : hermes-notify inputs : parameters : - name : message plugin : hermes : notify : target : default config : # Service specific config template : hermes-template context : # Template context message : \"{{inputs.parameters.message}}\" Complete workflow Putting all the puzzle pieces together we end up with the following workflow. apiVersion : argoproj.io/v1alpha1 kind : Workflow metadata : generateName : notifications-test- spec : entrypoint : main templates : - name : main steps : - - name : setup-notifications template : hermes-setup - - name : send-notification template : hermes-notify arguments : parameters : - name : message value : \"Hello world!\" - name : hermes-setup plugin : hermes : setup : alias : default service : some-service config : # Service specific config - name : hermes-notify inputs : parameters : - name : message plugin : hermes : notify : target : default template : hermes-template config : # Service specific config context : # Template context message : \"{{inputs.parameters.message}}\" The workflow above is of course not entirely complete as the service-specific parts are still missing, but replacing the service-specific parts with actual config should result in you seeing a \"Hello world!\" message in the messagin service of your choosing. What's next? Now that you are familiar with the core concepts of Hermes, you will be able to use this information to setup an actual service. Choose one of the supported services below and start sending notifications: Slack","title":"Introduction to services"},{"location":"services/#service-configuration","text":"Let's start with a minimal workflow in which we call two templates that will be defined later on in this guide. apiVersion : argoproj.io/v1alpha1 kind : Workflow metadata : generateName : notifications-test- spec : entrypoint : main templates : - name : main steps : - - name : setup-service template : hermes-setup - - name : send-notification template : hermes-notify arguments : parameters : - name : message value : \"Hello world!\" - name : hermes-setup # To be defined... - name : hermes-notify # To be defined...","title":"Service configuration"},{"location":"services/#setting-up-a-service","text":"A service is setup by issuing a setup call to Hermes. It expects following parameters: alias \u2013 an alias for the service that we will use to send notifications. This allows us to have multiple instances of the same service (imagine a scenario when you would like to send notifications to multiple Slack workspaces from the same workflow) service - the name of the service that we want to setup, e.g. slack config - service specific configuration, e.g. authenthication token, custom avatar, etc hermes-setup - name : hermes-setup plugin : hermes : setup : alias : default service : some-service config : # Service specific config","title":"Setting up a service"},{"location":"services/#adding-a-template","text":"In order to send a notification, we have to setup a template that we will use to render the notification. A template at its core is just a ConfigMap that has following shape: hermes-template apiVersion : v1 kind : ConfigMap metadata : name : hermes-template data : subtemplate1 : | {\"message\": \"{{message}}\"} # subtemplate2: ... The `` you are seeing in the template above is a Handlebar expression . It will be populated with the context provided by you when sending a notification. Internally, Hermes uses handlebar-rust as the template engine. Also, as you probably have noticed, a template consists of sub-templates. Sub-templates allow services to have multiple ways of presenting the same notification, i.e. in case of Slack a message might be sent to the channel using the primary sub-template and updates to the message will be posted in the message thread using the secondary sub-template. Every service defines its own set of required sub-templates.","title":"Adding a template"},{"location":"services/#sending-a-notification","text":"Now that we have both the service and template setup, it is time to see how sending notifications works. Notifications are sent using the notify call to Hermes. It expects following parameters: target \u2013 the alias of the service that we want to use to send a notification config - service specific configuration, e.g. name of a slack channel template - the name of the template to use for the notification context - the context to render the template with hermes-notify - name : hermes-notify inputs : parameters : - name : message plugin : hermes : notify : target : default config : # Service specific config template : hermes-template context : # Template context message : \"{{inputs.parameters.message}}\"","title":"Sending a notification"},{"location":"services/#complete-workflow","text":"Putting all the puzzle pieces together we end up with the following workflow. apiVersion : argoproj.io/v1alpha1 kind : Workflow metadata : generateName : notifications-test- spec : entrypoint : main templates : - name : main steps : - - name : setup-notifications template : hermes-setup - - name : send-notification template : hermes-notify arguments : parameters : - name : message value : \"Hello world!\" - name : hermes-setup plugin : hermes : setup : alias : default service : some-service config : # Service specific config - name : hermes-notify inputs : parameters : - name : message plugin : hermes : notify : target : default template : hermes-template config : # Service specific config context : # Template context message : \"{{inputs.parameters.message}}\" The workflow above is of course not entirely complete as the service-specific parts are still missing, but replacing the service-specific parts with actual config should result in you seeing a \"Hello world!\" message in the messagin service of your choosing.","title":"Complete workflow"},{"location":"services/#whats-next","text":"Now that you are familiar with the core concepts of Hermes, you will be able to use this information to setup an actual service. Choose one of the supported services below and start sending notifications: Slack","title":"What's next?"},{"location":"services/slack/","text":"Setup Slack service Create Slack application In order to send notifications to your Slack channels, first you need to setup a Slack application in your workspace. An application defines the permissions and appearance of the bot that will interact with your channels. The end goal of this step is to obtain a Slack authentication token that will be used by Hermes to send notifications. Choose one of the following two ways of creating the Slack application. Use the manifest button The button below will lead you to the app creation wizard in your Slack workspace where you will get to review the permissions it is requesting before adding it. Install Manifest Manually create the application If you do not really trust the button above, you can instead perform this process manually. Go to Slack Applications Press the \"Create New App\" button Choose the \"From an app manifest\" option Select the workspace you wish to create the app in Paste in the manifest below manifest.yaml _metadata : major_version : 1 minor_version : 1 display_information : name : Hermes features : bot_user : display_name : Hermes always_online : true oauth_config : scopes : bot : - chat:write - chat:write.customize settings : org_deploy_enabled : false socket_mode_enabled : false token_rotation_enabled : false Obtain the OAuth Token Go to Slack Applications Select the newly created Hermes app Click on \"OAuth & Permissions\" in the menu on the left Copy the \"Bot User OAuth Token\" and save it for later Example The provided example will generate following notification in your Slack channel. Slack token Create a secret containing the Slack token that you obtained using the setup guide . Access to secrets This example assumes that your workflow will be run using a service account that has access to this secret. apiVersion : v1 kind : Secret metadata : name : slack-token stringData : token : # Your Slack token goes here Template Add the following template: apiVersion : v1 kind : ConfigMap metadata : name : hermes-template-slack-default data : primary : | { \"text\": \"{{message}}\", \"blocks\": [ { \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"{{message}}\" } }, { \"type\": \"section\", \"fields\": [ { \"type\": \"mrkdwn\", \"text\": \"*Application*\\n{{app}}\" }, { \"type\": \"mrkdwn\", \"text\": \"*Environment*\\n{{env}}\" } ] }, { \"type\": \"section\", \"fields\": [ { \"type\": \"mrkdwn\", \"text\": \"*Revision*\\n<{{revision_url}}|{{revision_sha}}>\" } ] }, { \"type\": \"context\", \"elements\": [ { \"type\": \"mrkdwn\", \"text\": \"<{{log_url}}|View pipeline logs>\" } ] } ] } secondary : | {\"text\": \"{{message}}\"} Send notification Fill in the channel name in the workflow below and submit it. apiVersion : argoproj.io/v1alpha1 kind : Workflow metadata : generateName : notifications-test- spec : entrypoint : main templates : - name : main steps : - - name : setup-notifications template : hermes-setup - - name : pre-notification template : hermes-notify arguments : parameters : - name : message value : \"Deployment started :hourglass_flowing_sand:\" - - name : hello template : hello - - name : post-notification template : hermes-notify arguments : parameters : - name : message value : \"Deployment succeeded :white_check_mark:\" - name : hermes-setup plugin : hermes : setup : alias : default service : slack config : token : slack-token icon_emoji : \":rocket:\" - name : hermes-notify inputs : parameters : - name : message plugin : hermes : notify : target : default template : hermes-template-slack-default config : channel : # Your Slack channel name goes here context : message : \"{{inputs.parameters.message}}\" app : hermes env : prod revision_sha : \"deadbeef\" revision_url : \"https://google.com\" log_url : \"https://google.com\" - name : hello container : image : docker/whalesay command : [ cowsay ] args : [ \"hello world\" ]","title":"Slack"},{"location":"services/slack/#setup-slack-service","text":"","title":"Setup Slack service"},{"location":"services/slack/#create-slack-application","text":"In order to send notifications to your Slack channels, first you need to setup a Slack application in your workspace. An application defines the permissions and appearance of the bot that will interact with your channels. The end goal of this step is to obtain a Slack authentication token that will be used by Hermes to send notifications. Choose one of the following two ways of creating the Slack application.","title":"Create Slack application"},{"location":"services/slack/#use-the-manifest-button","text":"The button below will lead you to the app creation wizard in your Slack workspace where you will get to review the permissions it is requesting before adding it. Install Manifest","title":"Use the manifest button"},{"location":"services/slack/#manually-create-the-application","text":"If you do not really trust the button above, you can instead perform this process manually. Go to Slack Applications Press the \"Create New App\" button Choose the \"From an app manifest\" option Select the workspace you wish to create the app in Paste in the manifest below manifest.yaml _metadata : major_version : 1 minor_version : 1 display_information : name : Hermes features : bot_user : display_name : Hermes always_online : true oauth_config : scopes : bot : - chat:write - chat:write.customize settings : org_deploy_enabled : false socket_mode_enabled : false token_rotation_enabled : false","title":"Manually create the application"},{"location":"services/slack/#obtain-the-oauth-token","text":"Go to Slack Applications Select the newly created Hermes app Click on \"OAuth & Permissions\" in the menu on the left Copy the \"Bot User OAuth Token\" and save it for later","title":"Obtain the OAuth Token"},{"location":"services/slack/#example","text":"The provided example will generate following notification in your Slack channel.","title":"Example"},{"location":"services/slack/#slack-token","text":"Create a secret containing the Slack token that you obtained using the setup guide . Access to secrets This example assumes that your workflow will be run using a service account that has access to this secret. apiVersion : v1 kind : Secret metadata : name : slack-token stringData : token : # Your Slack token goes here","title":"Slack token"},{"location":"services/slack/#template","text":"Add the following template: apiVersion : v1 kind : ConfigMap metadata : name : hermes-template-slack-default data : primary : | { \"text\": \"{{message}}\", \"blocks\": [ { \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"{{message}}\" } }, { \"type\": \"section\", \"fields\": [ { \"type\": \"mrkdwn\", \"text\": \"*Application*\\n{{app}}\" }, { \"type\": \"mrkdwn\", \"text\": \"*Environment*\\n{{env}}\" } ] }, { \"type\": \"section\", \"fields\": [ { \"type\": \"mrkdwn\", \"text\": \"*Revision*\\n<{{revision_url}}|{{revision_sha}}>\" } ] }, { \"type\": \"context\", \"elements\": [ { \"type\": \"mrkdwn\", \"text\": \"<{{log_url}}|View pipeline logs>\" } ] } ] } secondary : | {\"text\": \"{{message}}\"}","title":"Template"},{"location":"services/slack/#send-notification","text":"Fill in the channel name in the workflow below and submit it. apiVersion : argoproj.io/v1alpha1 kind : Workflow metadata : generateName : notifications-test- spec : entrypoint : main templates : - name : main steps : - - name : setup-notifications template : hermes-setup - - name : pre-notification template : hermes-notify arguments : parameters : - name : message value : \"Deployment started :hourglass_flowing_sand:\" - - name : hello template : hello - - name : post-notification template : hermes-notify arguments : parameters : - name : message value : \"Deployment succeeded :white_check_mark:\" - name : hermes-setup plugin : hermes : setup : alias : default service : slack config : token : slack-token icon_emoji : \":rocket:\" - name : hermes-notify inputs : parameters : - name : message plugin : hermes : notify : target : default template : hermes-template-slack-default config : channel : # Your Slack channel name goes here context : message : \"{{inputs.parameters.message}}\" app : hermes env : prod revision_sha : \"deadbeef\" revision_url : \"https://google.com\" log_url : \"https://google.com\" - name : hello container : image : docker/whalesay command : [ cowsay ] args : [ \"hello world\" ]","title":"Send notification"}]}